set nocompatible

" Needed for vundle, will be turned off after vundle inits 
filetype off

"set runtime path to inc Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

"this is the call to begin the Vundle Plugin Operation

call vundle#begin()

" let vundle manage vundle
Plugin 'gmarik/Vundle.vim' 

" Utilities
Plugin 'bling/vim-airline' "provide the fancy statusline on vim
Plugin 'kien/ctrlp.vim' " fuzzy find files
Plugin 'scrooloose/nerdtree' " file drawer, open with :NERDTreeToggle
Plugin 'benmills/vimux' "allows vim to interact with tmux
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'Valloric/YouCompleteMe'

" colorschemes
"Plugin 'chriskempson/base16-vim'

" JavaScript plugins
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'

"Add following plugins
"bufferline - integrates with vim-airline to display buffers
"syntastic - syntax checker/linter (works for js, c)
"jshint - Javascript linter
"jscs - java script code style
"benmills/vimux - Allows vim to interact with tmux
"js-syntax
"vim-javascript
"supertab
"tabular
"presenting
"scratch
"vim-css-color
":PluginUpdatejs-syntax

call vundle#end()

filetype plugin indent on

set nocompatible "not compatible with vi
set autoread "detect when a file is changed

let mapleader = ","


"Tab control
set tabstop=4 "the visible width of tabs
set shiftwidth=4 "number of spaces to use for indent and unindent
"set textwidth=79 "Sets columns and word wrap
set expandtab "replaces tabs with spaces, aka et
"set noexpandtab "opposite of expand tabs

set smarttab "tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set softtabstop=4 "edit as if the tabs are 4 character wide
set shiftround "round indent to multiple of 'shiftwidth'
set sw=4 "Sets space width - set the auto indentation width

" Set cut/copy buffer as the global OS buffer so you can copy/paste
" into other applications
set clipboard=unnamed

"faster redrawing
set ttyfast

"code folding settings
set foldmethod=syntax "fold based on indent
set foldnestmax=10 "deepest fold is 10 levels
set nofoldenable "don't fold by default
set foldlevel=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Searching
set ignorecase  "case insensitive searching
set smartcase "case-sensitive if expression contains a capital letter
set hlsearch "aka hls, for highlighting what is being searched
set incsearch "set incremental search, like modern browsers
set nolazyredraw "don't redraw while executing macros

set magic "Set magic on, for regex

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink

" switch syntax highlighting on
syntax on

set encoding=utf8
let base16colorspace=256  "Access colors present in 256 colorspace
set t_Co=256 "Explicitly tell vim that the terminal supports 256 colors
colorscheme elflord

set number

set autoindent " automatically set indent of new line
set smartindent

set laststatus=2 " show the satus line all the time

"Send all the .swp and .bkp file to another temp directory away from source
"set nobackup
set backupdir=~/.vim-tmp,/var/tmp
set directory=~/.vim-tmp,/var/tmp

"Set color scheme - depending on whether it is gvim or vim
"remember this order is important vim first and then gvim
if v:progname =~? "vim"
    set guifont=Monospace\ 12
    "colors darkblue
    set mouse=a "This activates mouse control in text vim screen on xterm
endif

if v:progname =~? "vimdiff"
    set guifont=Monospace\ 12
    "colors darkblue
    set mouse=a "This activates mouse control in text vimdiff screen on xterm
endif

if v:progname =~? "gvim"
    set columns=100
    set lines=60
    colors default
    set guifont=Ubuntu\ Mono\ 11
		"set guifont=Nimbus\ Mono\ L\ 10
		"set guifont=Efont\ Fixed\ 9 
    "colors elflord
    "Sets no of lines
    "Set columns on screen
endif

"Set fileformat to Unix to prevent problems when sending to Linux machines
"set ff=dos - use this option to set windows based line feeds. This generates
"^M issues in linux
"The key sequence to get ^M is <CTRL>+v+m together
"Use this to get rid of files having ^M
"No need in new VIMs(7.1 and above) as they automatically read windows and unix files
"correctly
"set ffs="unix,dos"

" gvim -b : hex edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=200	" keep 200 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
"Do this only if vim version >= 7.0 
"setlocal spell spelllang=en_us   "enable spell checking


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

map <leader>ev :e! ~/.vimrc<cr> " edit ~/.vimrc

map <leader>wc :wincmd q<cr>

" moving up and down work as you would expect
"nnoremap <silent> j gj
"nnoremap <silent> k gk

" helpers for dealing with other people's code
nmap \t :set ts=4 sts=4 sw=4 noet<cr>
nmap \s :set ts=4 sts=4 sw=4 et<cr>

"list all buffers and move through them
map <C-l> :buffers<CR>
"map <C-9> :bp<CR>
"map <C-0> :bn<CR>

" Don't use Ex mode, use Q for formatting
map Q gq

"Alternate key map (F4) to help do CTRL + A ie, auto increment numbers
"This is useful in SCREEN sessions where CTRL + A already is trapped for
"changing windows
noremap <f4> <c-a>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"map <C-h> :call WinMove('h')<cr>
"map <C-j> :call WinMove('j')<cr>
"map <C-k> :call WinMove('k')<cr>
"map <C-l> :call WinMove('l')<cr>

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
"function! WinMove(key)
"    let t:curwin = winnr()
"    exec "wincmd ".a:key
"    if (t:curwin == winnr())
"        if (match(a:key,'[jk]'))
"            wincmd v
"        else
"            wincmd s
"        endif
"        exec "wincmd ".a:key
"    endif
"endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" Toggle NERDTree
nmap <silent> <leader>k :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

" map fuzzyfinder (CtrlP) plugin
" nmap <silent> <leader>t :CtrlP<cr>
nmap <silent> <leader>r :CtrlPBuffer<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

" CtrlP ignore patterns
let g:ctrlp_custom_ignore = {
            \ 'dir': '\.git$\|node_modules$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$'
            \ }

" search the nearest ancestor that contains .git, .hg, .svn
let g:ctrlp_working_path_mode = 2

"Mechanism to auto apply .vimrc when it is saved
"if has("autocmd")
"    autocmd bufwritepost .vimrc source $MYVIMRC
"endif

"Enable syntax highlighting of doxygen tags
let g:load_doxygen_syntax=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YouCompleteMe
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Point to the config file to use for YouCompleteMe
let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_min_num_identifier_candidate_chars = 4
"let g:ycm_extra_conf_globlist = ['~/repos/*']
let g:ycm_filetype_specific_completion_to_disable = {'javascript': 1}

"nnoremap <leader>y :YcmForceCompileAndDiagnostics<cr>
nnoremap <leader>js :YcmCompleter GoTo<CR>  "jump smar
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>ji :YcmCompleter GoToDeclaration<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1 "enables buffer tabs when only one tab is open
"let g:airline_theme = 'tomorrow'

